@model Dental_Clinic_System.Areas.Admin.ViewModels.AppointmentVM

@{
    ViewData["Title"] = "GetAppointmentStatus";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="dashboard__info">
    <h1 class="dashboard__info__title mb-0">Dashboard</h1>
    <div class="dashboard__info__cards d-flex flex-row">
        <div class="card-item">
            <p>Tổng đặt khám thành công</p>
            <p class="nums">@Model.SuccessfulAppointments</p>
            <img src="~/assets/images/user.png" alt="" />
        </div>

        <div class="card-item">
            <p>Tổng đặt khám thất bại</p>
            <p class="nums">@Model.FailedAppointments</p>
            <img src="~/assets/images/user.png" alt="" />
        </div>
    </div>

    <!-- ============ CHART ============ -->
    <div class="dashboard__info__chart">
        <canvas id="myChart" style="width: 100%; height: 500px"></canvas>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var ctx = document.getElementById('myChart').getContext('2d');
            var successfulData = @Html.Raw(Json.Serialize(Model.MonthlySuccessfulAppointments));
            var failedData = @Html.Raw(Json.Serialize(Model.MonthlyFailedAppointments));

            var currentDate = new Date();
            var currentMonth = currentDate.getMonth(); // 0-based index for months (January is 0)
            var currentYear = currentDate.getFullYear();
            var monthLabels = Array.from({ length: currentMonth + 1 }, (v, i) => `Tháng ${i + 1}`);

            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: monthLabels,
                    datasets: [{
                        label: 'Tổng đặt khám thành công',
                        data: successfulData.slice(0, currentMonth + 1),
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderWidth: 2,
                        fill: false,
                        pointBackgroundColor: 'rgba(75, 192, 192, 1)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(75, 192, 192, 1)'
                    }, {
                        label: 'Tổng đặt khám thất bại',
                        data: failedData.slice(0, currentMonth + 1),
                        borderColor: 'rgba(255, 99, 132, 1)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderWidth: 2,
                        fill: false,
                        pointBackgroundColor: 'rgba(255, 99, 132, 1)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(255, 99, 132, 1)'
                    }]
                },
                options: {
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                color: 'rgba(75, 192, 192, 1)'
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                color: 'rgba(75, 192, 192, 1)'
                            },
                            grid: {
                                color: 'rgba(75, 192, 192, 0.2)'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: 'rgba(75, 192, 192, 1)',
                                stepSize: 1,
                                callback: function (value, index, values) {
                                    return value;
                                }
                            },
                            grid: {
                                color: 'rgba(75, 192, 192, 0.2)'
                            }
                        }
                    }
                }
            });
        });
    </script>
}
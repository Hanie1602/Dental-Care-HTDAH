@model Dental_Clinic_System.Areas.Admin.ViewModels.DashboardVM

@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";

    var yearOptions = new System.Text.StringBuilder();
    for (int year = DateTime.Now.Year; year >= DateTime.Now.Year - 10; year--)
    {
        var selected = year == Model.SelectedYear ? "selected=\"selected\"" : "";
        yearOptions.AppendFormat("<option value=\"{0}\" {1}>{0}</option>", year, selected);
    }
}

<style>
    .dashboard__info__chartDai {
        width: 57%;
        height: 500px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        padding: 16px;
        background-color: #ffffff;
        margin-bottom: 20px;
    }

    .dashboard__info__chartTron {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 501px;
        width: 36%;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        padding: 19px;
        background-color: #ffffff;
        margin-bottom: 37px;
    }

    .dashboard__info__chartCot {
        width: 100%;
        height: 500px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        padding: 16px;
        background-color: #ffffff;
        margin-bottom: 20px;
    }

    .chart-title {
        text-align: center;
        margin-bottom: 10px;
        font-size: 18px;
        font-weight: bold;
    }

    .chart-legend {
        margin-top: 10px;
        display: flex;
        justify-content: center;
        gap: 20px;
    }

    .charts-container {
        display: flex;
        justify-content: space-around;
        align-items: flex-start;
        flex-wrap: wrap;
        gap: 20px;
        margin: 20px 0;
    }

    .dashboard__info__title {
        text-align: center;
        margin-bottom: 20px;
        font-size: 39px;
        font-weight: bold;
    }


</style>

<div class="dashboard__info">
    <h1 class="dashboard__info__title mb-0">Dashboard</h1>
    </br>
    
    <!-- ============ CHART ============ -->
    <div class="charts-container">
        @* Biểu đồ đường *@
        <div class="dashboard__info__chartDai">
            <h2 style="text-align: center">Biểu Đồ Đường Tổng Đặt Lịch Khám Của Mỗi Tháng</h2>

            <label for="yearSelect" style="font-weight: bold">Năm:</label>
            <select id="yearSelect" onchange="location = this.value;">
                @Html.Raw(yearOptions.ToString())
            </select> </br>
            
            <canvas id="myChart" style="width: 100%; height: 400px"></canvas>
        </div>

        @* Biểu đồ tròn *@
        <div class="dashboard__info__chartTron">
            <h2 style="text-align: center">Biểu Đồ Tròn Tổng Số Hợp Tác/ Từ Chối Yêu Cầu Của Phòng Khám Trong Ngày</h2> </br>
            <canvas id="orderChart" style="width: 100%; height: 300px"></canvas>
            
        </div>

        @* Biểu đồ cột *@
        <div class="dashboard__info__chartCot">
            <h2 style="text-align: center">Biểu Đồ Cột Tổng Số Tin Tức Được Đăng Trong Mỗi Tháng</h2>
            <canvas id="newsChart" style="width: 100%; height: 400px"></canvas>
        </div>

    </div>
</div>

@section Scripts {
    @* <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> *@
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var yearSelect = document.getElementById('yearSelect');
            yearSelect.addEventListener('change', function () {
                var selectedYear = this.value;
                var url = '@Url.Action("GetAppointmentStatus", "Dashboard", new { area = "Admin", year = "__year__" })';
                window.location.href = url.replace("__year__", selectedYear);
            });

            var ctx = document.getElementById('myChart').getContext('2d');
            var successfulData = @Html.Raw(Json.Serialize(Model.MonthlySuccessfulAppointments));
            var failedData = @Html.Raw(Json.Serialize(Model.MonthlyFailedAppointments));

            var currentYear = new Date().getFullYear();
            var currentMonth = new Date().getMonth() + 1;
            var monthLabels = [];

            if (@Model.SelectedYear == currentYear) {
                monthLabels = Array.from({ length: currentMonth }, (v, i) => `Tháng ${i + 1}`);
                successfulData = successfulData.slice(0, currentMonth);
                failedData = failedData.slice(0, currentMonth);
            } else {
                monthLabels = Array.from({ length: 12 }, (v, i) => `Tháng ${i + 1}`);
            }

            //Biểu đồ đường
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: monthLabels,
                    datasets: [{
                        label: 'Đặt Khám Thành Công',
                        data: successfulData,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderWidth: 2,
                        fill: false,
                        pointBackgroundColor: 'rgba(75, 192, 192, 1)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(75, 192, 192, 1)'
                    }, {
                        label: 'Đặt Khám Thất Bại',
                        data: failedData,
                        borderColor: 'rgba(255, 99, 132, 1)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderWidth: 2,
                        fill: false,
                        pointBackgroundColor: 'rgba(255, 99, 132, 1)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(255, 99, 132, 1)'
                    }]
                },
                options: {
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                color: 'rgba(75, 192, 192, 1)'
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                color: 'rgba(75, 192, 192, 1)'
                            },
                            grid: {
                                color: 'rgba(75, 192, 192, 0.2)'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: 'rgba(75, 192, 192, 1)',
                                stepSize: 5,
                                callback: function (value, index, values) {
                                    return value;
                                }
                            },
                            grid: {
                                color: 'rgba(75, 192, 192, 0.2)'
                            }
                        }
                    }
                }
            });

            //Biểu đồ tròn
            var orderCtx = document.getElementById('orderChart').getContext('2d');
            var acceptedOrdersToday = @Model.AcceptedOrdersToday;
            var rejectedOrdersToday = @Model.RejectedOrdersToday;

            var orderChart = new Chart(orderCtx, {
                type: 'pie',
                data: {
                    labels: ['Đồng ý', 'Từ chối'],
                    datasets: [{
                        data: [acceptedOrdersToday, rejectedOrdersToday],
                        backgroundColor: [
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(255, 99, 132, 0.2)'
                        ],
                        borderColor: [
                            'rgba(75, 192, 192, 1)',
                            'rgba(255, 99, 132, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        }
                    }
                }
            });

            //Biểu đồ cột
            var newsCtx = document.getElementById('newsChart').getContext('2d');
            var newsData = @Html.Raw(Json.Serialize(Model.MonthlyNewPost));

            var newsChart = new Chart(newsCtx, {
                type: 'bar',
                data: {
                    labels: Array.from({ length: 12 }, (v, i) => `Tháng ${i + 1}`),
                    datasets: [{
                        label: 'Số Lượng Tin Tức',
                        data: newsData,
                        backgroundColor: [
                            'rgba(54, 162, 235, 0.2)', // Tháng 1
                            'rgba(255, 99, 132, 0.2)', // Tháng 2
                            'rgba(255, 206, 86, 0.2)', // Tháng 3
                            'rgba(75, 192, 192, 0.2)', // Tháng 4
                            'rgba(153, 102, 255, 0.2)', // Tháng 5
                            'rgba(255, 159, 64, 0.2)', // Tháng 6
                            'rgba(255, 99, 132, 0.2)', // Tháng 7
                            'rgba(54, 162, 235, 0.2)', // Tháng 8
                            'rgba(75, 192, 192, 0.2)', // Tháng 9
                            'rgba(153, 102, 255, 0.2)', // Tháng 10
                            'rgba(255, 206, 86, 0.2)', // Tháng 11
                            'rgba(255, 159, 64, 0.2)'  // Tháng 12
                        ],
                        borderColor: [
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        x: {
                            beginAtZero: true
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 5,
                                callback: function (value, index, values) {
                                    return value;
                                }
                            }
                        }
                    }
                }
            });

        });
    </script>
}
